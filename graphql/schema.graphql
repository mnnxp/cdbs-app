schema {
  query: QueryRoot
  mutation: MutationRoot
}

type ActualStatusTranslateList {
  actualStatusId: Int!
  langId: Int!
  name: String!
}

input ChangeOwnerComponent {
  componentUuid: UUID!
  newOwnerUserUuid: UUID!
}

input ChangeOwnerStandard {
  standardUuid: UUID!
  newOwnerUserUuid: UUID!
}

input ChangeTypeAccessCompany {
  companyUuid: UUID!
  newTypeAccessId: Int!
}

input ChangeTypeAccessComponent {
  componentUuid: UUID!
  newTypeAccessId: Int!
}

input ChangeTypeAccessStandard {
  standardUuid: UUID!
  newTypeAccessId: Int!
}

type Claims {
  iss: String!
  username: String!
  sub: String!
  iat: String!
  exp: String!
}

type CompanyAccessComponentAndRelatedData {
  componentUuid: UUID!
  companyUuid: UUID!
  typeAccess: TypeAccessTranslateList!
  isEnabled: Boolean!
  createdAt: NaiveDateTime!
  updatedAt: NaiveDateTime!
}

type CompanyAccessStandardAndRelatedData {
  standardUuid: UUID!
  companyUuid: UUID!
  typeAccess: TypeAccessTranslateList!
  isEnabled: Boolean!
  createdAt: NaiveDateTime!
  updatedAt: NaiveDateTime!
}

type CompanyAndRelatedData {
  uuid: UUID!
  orgname: String!
  shortname: String!
  inn: String!
  phone: String!
  email: String!
  description: String!
  address: String!
  siteUrl: String!
  timeZone: String!
  ownerUser: ShowUserShort!
  imageFile: DownloadFile!
  region: RegionTranslateList!
  companyRepresents: [CompanyRepresentAndRelatedData!]!
  companyType: CompanyTypeTranslateList!
  companyCertificates: [CompanyCertificateAndFile!]!
  companySpecs: [SpecTranslateList!]!
  typeAccess: TypeAccessTranslateList!
  isSupplier: Boolean!
  isEmailVerified: Boolean!
  subscribers: Int!
  isFollowed: Boolean!
  createdAt: NaiveDateTime!
  updatedAt: NaiveDateTime!
}

type CompanyCertificateAndFile {
  file: DownloadFile!
  companyUuid: UUID!
  description: String!
}

type CompanyMemberAndRelatedData {
  companyUuid: UUID!
  userUuid: UUID!
  role: RoleMemberAndRelatedData!
  isEnabled: Boolean!
  createdAt: NaiveDateTime!
  updatedAt: NaiveDateTime!
}

type CompanyRepresentAndRelatedData {
  uuid: UUID!
  companyUuid: UUID!
  region: RegionTranslateList!
  representationType: RepresentationTypeTranslateList!
  name: String!
  address: String!
  phone: String!
}

type CompanyTypeTranslateList {
  companyTypeId: Int!
  langId: Int!
  name: String!
  shortname: String!
}

type ComponentAndRelatedData {
  uuid: UUID!
  parentComponentUuid: UUID!
  name: String!
  description: String!
  imageFile: DownloadFile!
  ownerUser: ShowUserShort!
  typeAccess: TypeAccessTranslateList!
  componentType: ComponentTypeTranslateList!
  actualStatus: ActualStatusTranslateList!
  isBase: Boolean!
  subscribers: Int!
  isFollowed: Boolean!
  createdAt: NaiveDateTime!
  updatedAt: NaiveDateTime!
  licenses: [License!]!
  componentParams: [ComponentParamWithTranslation!]!
  files: [ShowFileRelatedData!]!
  componentSpecs: [SpecTranslateList!]!
  componentKeywords: [Keyword!]!
  componentModifications: [ComponentModificationAndRelatedData!]!
  componentSuppliers: [ComponentSupplierRelatedData!]!
  componentStandards: [ShowStandardShort!]!
}

type ComponentModificationAndRelatedData {
  uuid: UUID!
  componentUuid: UUID!
  parentModificationUuid: UUID!
  modificationName: String!
  description: String!
  actualStatus: ActualStatusTranslateList!
  createdAt: NaiveDateTime!
  updatedAt: NaiveDateTime!
  filesetsForProgram: [FilesetProgramRelatedData!]!
  modificationParams: [ModificationParamWithTranslation!]!
}

type ComponentParamWithTranslation {
  componentUuid: UUID!
  param: ParamTranslateList!
  value: String!
}

type ComponentSupplierRelatedData {
  supplier: SlimCompany!
  componentUuid: UUID!
  description: String!
}

type ComponentTypeTranslateList {
  componentTypeId: Int!
  langId: Int!
  componentType: String!
}

type DegreeImportanceTranslateList {
  degreeImportanceId: Int!
  langId: Int!
  degree: String!
}

input DelCompanyAccessComponentData {
  componentUuid: UUID!
  companyUuid: UUID!
}

input DelCompanyAccessStandardData {
  standardUuid: UUID!
  companyUuid: UUID!
}

input DelCompanyCertificateData {
  companyUuid: UUID!
  fileUuid: UUID!
}

input DelCompanyMemberData {
  companyUuid: UUID!
  userUuid: UUID!
}

input DelCompanyOfSuppliersData {
  companyUuid: UUID!
  componentUuid: UUID!
}

input DelComponentFileData {
  fileUuid: UUID!
  componentUuid: UUID!
}

input DelComponentModificationData {
  componentUuid: UUID!
  modificationUuid: UUID!
}

input DelComponentParamData {
  componentUuid: UUID!
  paramIds: [Int!]!
}

input DelFilesetProgramData {
  modificationUuid: UUID!
  filesetUuid: UUID!
}

input DelModificationFileData {
  fileUuid: UUID!
  modificationUuid: UUID!
}

input DelModificationFileFromFilesetData {
  filesetUuid: UUID!
  fileUuids: [UUID!]!
}

input DelModificationParamData {
  modificationUuid: UUID!
  paramIds: [Int!]!
}

input DelRoleAccessData {
  roleId: Int!
  typesAccessIds: [Int!]!
}

input DelRoleMemberData {
  companyUuid: UUID!
  roleId: Int!
}

input DelStandardToComponentData {
  standardsUuids: [UUID!]!
  componentUuid: UUID!
}

input DelSuppliersComponentData {
  componentUuid: UUID!
  companiesUuids: [UUID!]!
}

input DelUserAccessComponentData {
  componentUuid: UUID!
  userUuid: UUID!
}

input DelUserAccessStandardData {
  standardUuid: UUID!
  userUuid: UUID!
}

input DelUserCertificateData {
  fileUuid: UUID!
}

input DeleteStandardFileData {
  fileUuid: UUID!
  standardUuid: UUID!
}

type DownloadFile {
  uuid: UUID!
  hash: String!
  filename: String!
  filesize: Int!
  downloadUrl: String!
}

type Extension {
  id: Int!
  extension: String!
  programId: Int!
}

type FilesetProgramRelatedData {
  uuid: UUID!
  modificationUuid: UUID!
  program: Program!
}

input IptCompaniesArg {
  companiesUuids: [UUID!]
  userUuid: UUID
  favorite: Boolean
  supplier: Boolean
  limit: Int
  offset: Int
}

input IptCompanyAccessComponentData {
  componentUuid: UUID!
  companyUuid: UUID!
  typeAccessId: Int!
}

input IptCompanyAccessStandardData {
  standardUuid: UUID!
  companyUuid: UUID!
  typeAccessId: Int!
}

input IptCompanyCertificateData {
  companyUuid: UUID!
  description: String!
  filename: String!
}

input IptCompanyData {
  orgname: String!
  shortname: String!
  inn: String!
  phone: String!
  email: String!
  description: String!
  address: String!
  siteUrl: String!
  timeZone: String!
  regionId: Int!
  companyTypeId: Int!
  typeAccessId: Int!
}

input IptCompanyMemberData {
  companyUuid: UUID!
  userUuid: UUID!
  roleId: Int!
}

input IptCompanyRepresentData {
  companyUuid: UUID!
  regionId: Int!
  representationTypeId: Int!
  name: String!
  address: String!
  phone: String!
}

input IptCompanyRepresentsArg {
  companyUuid: UUID
  representsUuids: [UUID!]
  limit: Int
  offset: Int
}

input IptCompanySpecsArg {
  companyUuid: UUID!
  limit: Int
  offset: Int
}

input IptCompanySpecsData {
  companyUuid: UUID!
  specIds: [Int!]!
}

input IptComponentData {
  parentComponentUuid: UUID
  name: String!
  description: String!
  typeAccessId: Int!
  componentTypeId: Int!
  actualStatusId: Int!
  isBase: Boolean!
}

input IptComponentFaviconData {
  filename: String!
  componentUuid: UUID!
}

input IptComponentFilesArg {
  componentUuid: UUID!
  filesUuids: [UUID!]
  limit: Int
  offset: Int
}

input IptComponentFilesData {
  filenames: [String!]!
  componentUuid: UUID!
}

input IptComponentKeywordsArg {
  componentUuid: UUID!
  limit: Int
  offset: Int
}

input IptComponentKeywordsData {
  componentUuid: UUID!
  keywordIds: [Int!]!
}

input IptComponentKeywordsNames {
  componentUuid: UUID!
  keywords: [String!]!
}

input IptComponentLicenseData {
  componentUuid: UUID!
  licenseId: Int!
}

input IptComponentModificationArg {
  componentUuid: UUID!
  limit: Int
  offset: Int
}

input IptComponentModificationData {
  componentUuid: UUID!
  parentModificationUuid: UUID
  modificationName: String!
  description: String!
  actualStatusId: Int!
}

input IptComponentParamsData {
  componentUuid: UUID!
  params: [IptParamData!]!
}

input IptComponentSpecsArg {
  componentUuid: UUID!
  limit: Int
  offset: Int
}

input IptComponentSpecsData {
  componentUuid: UUID!
  specIds: [Int!]!
}

input IptComponentsArg {
  componentsUuids: [UUID!]
  companyUuid: UUID
  standardUuid: UUID
  userUuid: UUID
  favorite: Boolean
  limit: Int
  offset: Int
}

input IptExtensionData {
  extension: String!
  programId: Int!
}

input IptFileOfFilesetArg {
  filesetUuid: UUID!
  fileUuids: [UUID!]
  limit: Int
  offset: Int
}

input IptFilesetProgramArg {
  modificationUuid: UUID!
  programIds: [Int!]
  limit: Int
  offset: Int
}

input IptFilesetProgramData {
  modificationUuid: UUID!
  programId: Int!
}

input IptGetUserArg {
  userUuid: UUID
  username: String
}

input IptKeywordArg {
  keywordIds: [Int!]
  limit: Int
  offset: Int
}

input IptKeywordData {
  keyword: String!
}

input IptLanguageArg {
  langIds: [Int!]
  limit: Int
  offset: Int
}

input IptLicenseArg {
  licenseIds: [Int!]
  limit: Int
  offset: Int
}

input IptModificationFileFromFilesetData {
  filesetUuid: UUID!
  filenames: [String!]!
}

input IptModificationFilesArg {
  modificationUuid: UUID!
  filesUuids: [UUID!]
  limit: Int
  offset: Int
}

input IptModificationFilesData {
  filenames: [String!]!
  modificationUuid: UUID!
}

input IptModificationParamData {
  modificationUuid: UUID!
  params: [IptParamData!]!
}

input IptNotificationArg {
  notificationIds: [Int!]
  limit: Int
  offset: Int
}

input IptParamArg {
  paramIds: [Int!]
  limit: Int
  offset: Int
}

input IptParamData {
  paramId: Int!
  value: String!
}

input IptParamTranslateListData {
  langId: Int!
  paramname: String!
}

input IptProgramArg {
  programIds: [Int!]
  limit: Int
  offset: Int
}

input IptProgramData {
  name: String!
}

input IptRegionArg {
  regionIds: [Int!]
  limit: Int
  offset: Int
}

input IptRegionTranslateListData {
  langId: Int!
  region: String!
}

input IptRoleAccessData {
  roleId: Int!
  typesAccessIds: [Int!]!
}

input IptRoleMemberData {
  companyUuid: UUID!
  langId: Int!
  name: String!
}

input IptSearchSpecArg {
  text: String!
  splitChar: String
  depthLevel: Int
  limit: Int
  offset: Int
}

input IptSpecArg {
  specIds: [Int!]
  specsLevels: [Int!]
  limit: Int
  offset: Int
}

input IptSpecPathArg {
  specIds: [Int!]
  splitChar: String
  depthLevel: Int
  limit: Int
  offset: Int
}

input IptStandardData {
  parentStandardUuid: UUID
  classifier: String!
  name: String!
  description: String!
  specifiedTolerance: String!
  technicalCommittee: String!
  publicationAt: NaiveDateTime!
  companyUuid: UUID!
  typeAccessId: Int!
  standardStatusId: Int!
  regionId: Int!
}

input IptStandardFaviconData {
  filename: String!
  standardUuid: UUID!
}

input IptStandardFilesArg {
  standardUuid: UUID!
  filesUuids: [UUID!]
  limit: Int
  offset: Int
}

input IptStandardFilesData {
  filenames: [String!]!
  standardUuid: UUID!
}

input IptStandardKeywordsArg {
  standardUuid: UUID!
  limit: Int
  offset: Int
}

input IptStandardKeywordsData {
  standardUuid: UUID!
  keywordIds: [Int!]!
}

input IptStandardKeywordsNames {
  standardUuid: UUID!
  keywords: [String!]!
}

input IptStandardSpecsArg {
  standardUuid: UUID!
  limit: Int
  offset: Int
}

input IptStandardSpecsData {
  standardUuid: UUID!
  specIds: [Int!]!
}

input IptStandardToComponentData {
  standardUuid: UUID!
  componentUuid: UUID!
}

input IptStandardsArg {
  standardsUuids: [UUID!]
  companyUuid: UUID
  favorite: Boolean
  limit: Int
  offset: Int
}

input IptSupplierComponentData {
  componentUuid: UUID!
  companyUuid: UUID!
  description: String!
}

input IptTypeAccessArg {
  typeAccessIds: [Int!]
  limit: Int
  offset: Int
}

input IptUpdateCompanyCertificateData {
  companyUuid: UUID!
  fileUuid: UUID!
  description: String!
}

input IptUpdateCompanyData {
  orgname: String
  shortname: String
  inn: String
  phone: String
  email: String
  description: String
  address: String
  siteUrl: String
  timeZone: String
  regionId: Int
  companyTypeId: Int
}

input IptUpdateCompanyRepresentData {
  regionId: Int
  representationTypeId: Int
  name: String
  address: String
  phone: String
}

input IptUpdateComponentData {
  parentComponentUuid: UUID
  name: String
  description: String
  componentTypeId: Int
  actualStatusId: Int
}

input IptUpdateComponentModificationData {
  modificationName: String
  description: String
  actualStatusId: Int
}

input IptUpdateNameRoleData {
  companyUuid: UUID!
  roleId: Int!
  langId: Int!
  name: String!
}

input IptUpdatePassword {
  oldPassword: String!
  newPassword: String!
}

input IptUpdateStandardData {
  classifier: String
  name: String
  description: String
  specifiedTolerance: String
  technicalCommittee: String
  publicationAt: NaiveDateTime
  companyUuid: UUID
  standardStatusId: Int
  regionId: Int
}

input IptUpdateUserCertificateData {
  fileUuid: UUID!
  description: String!
}

input IptUpdateUserData {
  email: String
  firstname: String
  lastname: String
  secondname: String
  username: String
  phone: String
  description: String
  address: String
  position: String
  timeZone: String
  regionId: Int
  programId: Int
}

input IptUserAccessComponentData {
  componentUuid: UUID!
  userUuid: UUID!
  typeAccessId: Int!
}

input IptUserAccessStandardData {
  standardUuid: UUID!
  userUuid: UUID!
  typeAccessId: Int!
}

input IptUserCertificateData {
  description: String!
  filename: String!
}

input IptUserData {
  email: String!
  username: String!
  password: String!
  firstname: String
  lastname: String
  secondname: String
  phone: String
  description: String
  address: String
  position: String
  timeZone: String
  regionId: Int
  programId: Int
  typeAccessId: Int
}

input IptUsersArg {
  usersUuids: [UUID!]
  subscribers: Boolean
  favorite: Boolean
  limit: Int
  offset: Int
}

type Keyword {
  id: Int!
  keyword: String!
}

type Language {
  id: Int!
  lang: String!
  langshort: String!
}

type License {
  id: Int!
  name: String!
  keyword: String!
  publicationAt: NaiveDateTime!
}

input LicenseData {
  name: String!
  keyword: String!
  publicationAt: NaiveDateTime!
}

type ModificationParamWithTranslation {
  modificationUuid: UUID!
  param: ParamTranslateList!
  value: String!
}

type MutationRoot {
  registerUser(args: IptUserData!): SlimUser!
  deleteUserData(password: String!): Boolean!
  putUpdatePassword(args: IptUpdatePassword!): Boolean!
  changeTypeAccessUser(newTypeAccess: Int!): Boolean!
  putUserUpdate(args: IptUpdateUserData!): Int!
  uploadFavicon(filename: String!): UploadFile!
  uploadUserCertificate(certData: IptUserCertificateData!): UploadFile!

  # Update user certificate description
  updateUserCertificate(args: IptUpdateUserCertificateData!): Boolean!
  deleteUserCertificate(args: DelUserCertificateData!): Boolean!
  addCompanyFav(companyUuid: UUID!): Boolean!
  deleteCompanyFav(companyUuid: UUID!): Boolean!
  addComponentFav(componentUuid: UUID!): Boolean!
  deleteComponentFav(componentUuid: UUID!): Boolean!
  addStandardFav(standardUuid: UUID!): Boolean!
  deleteStandardFav(standardUuid: UUID!): Boolean!
  addUserFav(userUuid: UUID!): Boolean!
  deleteUserFav(userUuid: UUID!): Boolean!
  readNotifications(notificationsIds: [Int!]!): Int!
  deleteNotifications(notificationsIds: [Int!]!): Int!
  logout: String!
  registerComponent(args: IptComponentData!): UUID!

  # Transfer component ownership to another user
  transferComponentOwnership(args: ChangeOwnerComponent!): Boolean!

  # Change component type access
  changeComponentAccess(args: ChangeTypeAccessComponent!): Boolean!
  putComponentUpdate(componentUuid: UUID!, args: IptUpdateComponentData!): Int!
  deleteComponent(componentUuid: UUID!): UUID!
  setCompanyAccessComponent(args: IptCompanyAccessComponentData!): Boolean!
  deleteCompanyAccessComponent(args: DelCompanyAccessComponentData!): Boolean!
  setUserAccessComponent(args: IptUserAccessComponentData!): Boolean!
  deleteUserAccessComponent(args: DelUserAccessComponentData!): Boolean!
  putComponentParams(args: IptComponentParamsData!): Int!
  deleteComponentParams(args: DelComponentParamData!): Int!
  addComponentLicense(args: IptComponentLicenseData!): Boolean!
  deleteComponentLicense(args: IptComponentLicenseData!): Int!
  addComponentSpecs(args: IptComponentSpecsData!): Int!
  deleteComponentSpecs(args: IptComponentSpecsData!): Int!
  addComponentKeywords(args: IptComponentKeywordsData!): Int!
  addComponentKeywordsByNames(args: IptComponentKeywordsNames!): Int!
  deleteComponentKeywords(args: IptComponentKeywordsData!): Int!
  uploadComponentFiles(args: IptComponentFilesData!): [UploadFile!]!
  uploadComponentFavicon(args: IptComponentFaviconData!): UploadFile!
  deleteComponentFile(args: DelComponentFileData!): Boolean!
  deleteSuppliersComponent(args: DelSuppliersComponentData!): Int!
  addStandardToComponent(args: IptStandardToComponentData!): Boolean!
  deleteStandardsComponent(args: DelStandardToComponentData!): Int!
  registerComponentModification(args: IptComponentModificationData!): UUID!
  putComponentModificationUpdate(
    componentModificationUuid: UUID!
    args: IptUpdateComponentModificationData!
  ): Int!
  deleteComponentModification(args: DelComponentModificationData!): UUID!
  putModificationParams(args: IptModificationParamData!): Int!
  deleteModificationParams(args: DelModificationParamData!): Int!
  uploadModificationFiles(args: IptModificationFilesData!): [UploadFile!]!
  deleteModificationFile(args: DelModificationFileData!): Boolean!
  registerModificationFileset(args: IptFilesetProgramData!): UUID!
  deleteModificationFileset(args: DelFilesetProgramData!): Boolean!
  uploadFilesToFileset(
    args: IptModificationFileFromFilesetData!
  ): [UploadFile!]!
  deleteFilesFromFileset(args: DelModificationFileFromFilesetData!): Boolean!
  registerStandard(args: IptStandardData!): UUID!

  # Transfer component ownership to another user
  transferStandardOwnership(args: ChangeOwnerStandard!): Boolean!

  # Change standard type access
  changeStandardAccess(args: ChangeTypeAccessStandard!): Boolean!
  putStandardUpdate(standardUuid: UUID!, args: IptUpdateStandardData!): Int!
  deleteStandard(standardUuid: UUID!): UUID!
  setCompanyAccessStandard(args: IptCompanyAccessStandardData!): Boolean!
  deleteCompanyAccessStandard(args: DelCompanyAccessStandardData!): Boolean!
  setUserAccessStandard(args: IptUserAccessStandardData!): Boolean!
  deleteUserAccessStandard(args: DelUserAccessStandardData!): Boolean!
  addStandardSpecs(args: IptStandardSpecsData!): Int!
  deleteStandardSpecs(args: IptStandardSpecsData!): Int!
  addStandardKeywords(args: IptStandardKeywordsData!): Int!
  addStandardKeywordsByNames(args: IptStandardKeywordsNames!): Int!
  deleteStandardKeywords(args: IptStandardKeywordsData!): Int!
  uploadStandardFiles(args: IptStandardFilesData!): [UploadFile!]!
  uploadStandardFavicon(args: IptStandardFaviconData!): UploadFile!
  deleteStandardFile(args: DeleteStandardFileData!): Boolean!
  registerCompany(args: IptCompanyData!): UUID!
  putCompanyUpdate(companyUuid: UUID!, args: IptUpdateCompanyData!): Int!

  # Change company type access
  changeCompanyAccess(args: ChangeTypeAccessCompany!): Boolean!
  deleteCompany(companyUuid: UUID!): UUID!
  uploadCompanyFavicon(companyUuid: UUID!, filename: String!): UploadFile!
  uploadCompanyCertificate(certData: IptCompanyCertificateData!): UploadFile!

  # Update company certificate description
  updateCompanyCertificate(args: IptUpdateCompanyCertificateData!): Boolean!
  deleteCompanyCertificate(args: DelCompanyCertificateData!): Boolean!
  addCompanySpecs(args: IptCompanySpecsData!): Int!
  deleteCompanySpecs(args: IptCompanySpecsData!): Int!
  registerCompanyRepresent(args: IptCompanyRepresentData!): Boolean!
  updateCompanyRepresent(
    companyUuid: UUID!
    companyRepresentUuid: UUID!
    args: IptUpdateCompanyRepresentData!
  ): Int!
  deleteCompanyRepresent(
    companyUuid: UUID!
    companyRepresentUuid: UUID!
  ): Boolean!
  addCompanyMember(args: IptCompanyMemberData!): Boolean!

  # Change access role for member
  changeRoleMember(args: IptCompanyMemberData!): Boolean!
  deleteCompanyMember(args: DelCompanyMemberData!): Boolean!
  registerCompanyRole(args: IptRoleMemberData!): Int!
  changeNameRoleCompany(args: IptUpdateNameRoleData!): Boolean!
  deleteCompanyRole(args: DelRoleMemberData!): Int!
  addAccessRole(args: IptRoleAccessData!): Boolean!
  deleteAccessRole(args: DelRoleAccessData!): Int!

  # Add company to suppliers list component
  addComponentSupplier(args: IptSupplierComponentData!): Boolean!

  # Set company as main supplier component
  setCompanyOwnerSupplier(args: IptSupplierComponentData!): Boolean!

  # Delete company of suppliers list
  deleteSupplierCompany(args: DelCompanyOfSuppliersData!): Boolean!
  registerExtension(args: IptExtensionData!): Extension!
  registerKeyword(args: IptKeywordData!): Keyword!
  registerLicense(args: LicenseData!): License!
  registerParam(args: IptParamTranslateListData!): Int!
  registerProgram(args: IptProgramData!): Program!
  registerRegion(args: IptRegionTranslateListData!): RegionTranslateList!

  # Сonfirmation of successful upload of files to storage
  uploadCompleted(fileUuids: [UUID!]!): Int!

  # Changes active revision of file
  changeActiveFileRevision(fileUuid: UUID!): Boolean!

  # Sets a flag for delete file in storage
  deleteFile(fileUuid: UUID!): Boolean!
}

# ISO 8601 combined date and time without timezone.
#
# # Examples
#
# * `2015-07-01T08:59:60.123`,
scalar NaiveDateTime

type ParamTranslateList {
  paramId: Int!
  langId: Int!
  paramname: String!
}

type Program {
  id: Int!
  name: String!
}

type QueryRoot {
  users(args: IptUsersArg): [ShowUserShort!]!
  user(args: IptGetUserArg!): ShowUserAndRelatedData!
  myself: SlimUser!
  selfData: UserAndRelatedData!
  showTokens: [UserToken!]!
  getToken: Token!
  updateToken: Token!
  decodeToken: Claims!
  deleteToken(token: String!): Boolean!
  deleteAllTokens: Int!
  notifications(args: IptNotificationArg): [ShowNotification!]!
  components(args: IptComponentsArg): [ShowComponentShort!]!
  component(
    componentUuid: UUID!
    limit: Int
    offset: Int
  ): ComponentAndRelatedData!
  componentModifications(
    args: IptComponentModificationArg!
  ): [ComponentModificationAndRelatedData!]!
  componentSuppliers(componentUuid: UUID!): [ComponentSupplierRelatedData!]!
  componentKeywords(args: IptComponentKeywordsArg!): [Keyword!]!
  getCompaniesListAccessComponent(
    componentUuid: UUID!
  ): [CompanyAccessComponentAndRelatedData!]!
  getUsersListAccessComponent(
    componentUuid: UUID!
  ): [UserAccessComponentAndRelatedData!]!
  componentFiles(args: IptComponentFilesArg!): [DownloadFile!]!
  componentFilesList(args: IptComponentFilesArg!): [ShowFileRelatedData!]!
  componentSpecs(args: IptComponentSpecsArg!): [SpecTranslateList!]!
  componentModificationFiles(args: IptModificationFilesArg!): [DownloadFile!]!
  componentModificationFilesList(
    args: IptModificationFilesArg!
  ): [ShowFileRelatedData!]!
  componentModificationFilesets(
    args: IptFilesetProgramArg!
  ): [FilesetProgramRelatedData!]!

  # Returns information about files from a set of component modification files
  componentModificationFilesOfFileset(
    args: IptFileOfFilesetArg!
  ): [ShowFileRelatedData!]!

  # Returns presigned-url and relate data for download files from a modification fileset
  componentModificationFilesetFiles(
    args: IptFileOfFilesetArg!
  ): [DownloadFile!]!
  componentTypes(filter: [Int!]): [ComponentTypeTranslateList!]!
  componentActualStatuses(filter: [Int!]): [ActualStatusTranslateList!]!
  standards(args: IptStandardsArg): [ShowStandardShort!]!
  standard(
    standardUuid: UUID!
    limit: Int
    offset: Int
  ): StandardAndRelatedData!
  standardFiles(args: IptStandardFilesArg!): [DownloadFile!]!
  standardSpecs(args: IptStandardSpecsArg!): [SpecTranslateList!]!
  standardKeywords(args: IptStandardKeywordsArg!): [Keyword!]!
  getCompaniesListAccessStandard(
    standardUuid: UUID!
  ): [CompanyAccessStandardAndRelatedData!]!
  getUsersListAccessStandard(
    standardUuid: UUID!
  ): [UserAccessStandardAndRelatedData!]!
  standardStatuses(filter: [Int!]): [StandardStatusTranslateList!]!
  companies(args: IptCompaniesArg): [ShowCompanyShort!]!
  company(companyUuid: UUID!): CompanyAndRelatedData!
  companyRepresents(
    args: IptCompanyRepresentsArg!
  ): [CompanyRepresentAndRelatedData!]!
  companyMembers(companyUuid: UUID!): [CompanyMemberAndRelatedData!]!
  companyRoles(companyUuid: UUID!): [RoleMemberAndRelatedData!]!
  companyTypes: [CompanyTypeTranslateList!]!
  companySpecs(args: IptCompanySpecsArg!): [SpecTranslateList!]!
  companyRepresentTypes: [RepresentationTypeTranslateList!]!
  keywords(args: IptKeywordArg): [Keyword!]!
  languages(args: IptLanguageArg): [Language!]!
  licenses(args: IptLicenseArg): [License!]!
  params(args: IptParamArg): [ParamTranslateList!]!
  programs(args: IptProgramArg): [Program!]!
  regions(args: IptRegionArg): [RegionTranslateList!]!
  specs(args: IptSpecArg): [SpecTranslateList!]!
  specsPaths(args: IptSpecPathArg): [SpecPath!]!
  searchSpecs(args: IptSearchSpecArg!): [SpecPath!]!

  # Presigned URL for download file from storage
  presignedUrl(fileUuid: UUID!): DownloadFile!

  # Returns ShowFile for all (not deleted) file versions
  showFileRevisions(
    fileUuid: UUID!
    limit: Int
    offset: Int
  ): [ShowFileRelatedData!]!
  typesAccess(args: IptTypeAccessArg): [TypeAccessTranslateList!]!
}

type RegionTranslateList {
  regionId: Int!
  langId: Int!
  region: String!
}

type RepresentationTypeTranslateList {
  representationTypeId: Int!
  langId: Int!
  representationType: String!
}

type RoleMemberAndRelatedData {
  role: RoleMemberTranslateList!
  access: [TypeAccessTranslateList!]!
}

type RoleMemberTranslateList {
  roleMemberId: Int!
  langId: Int!
  name: String!
}

type ShowCompanyShort {
  uuid: UUID!
  shortname: String!
  inn: String!
  description: String!
  imageFile: DownloadFile!
  region: RegionTranslateList!
  companyType: CompanyTypeTranslateList!
  isSupplier: Boolean!
  isFollowed: Boolean!
  updatedAt: NaiveDateTime!
}

type ShowComponentShort {
  uuid: UUID!
  name: String!
  description: String!
  imageFile: DownloadFile!
  ownerUser: ShowUserShort!
  typeAccess: TypeAccessTranslateList!
  componentType: ComponentTypeTranslateList!
  actualStatus: ActualStatusTranslateList!
  isBase: Boolean!
  isFollowed: Boolean!
  updatedAt: NaiveDateTime!
  licenses: [License!]!
  files: [DownloadFile!]!
  componentSuppliers: [ComponentSupplierRelatedData!]!
}

type ShowFileRelatedData {
  uuid: UUID!
  filename: String!
  revision: Int!
  parentFileUuid: UUID!
  ownerUser: ShowUserShort!
  contentType: String!
  filesize: Int!
  program: Program!
  createdAt: NaiveDateTime!
  updatedAt: NaiveDateTime!
}

type ShowNotification {
  id: Int!
  notification: String!
  degreeImportance: DegreeImportanceTranslateList!
  createdAt: NaiveDateTime!
  isRead: Boolean!
}

type ShowStandardShort {
  uuid: UUID!
  classifier: String!
  name: String!
  description: String!
  specifiedTolerance: String!
  publicationAt: NaiveDateTime!
  imageFile: DownloadFile!
  ownerCompany: ShowCompanyShort!
  standardStatus: StandardStatusTranslateList!
  updatedAt: NaiveDateTime!
  isFollowed: Boolean!
}

# For show data about profile
type ShowUserAndRelatedData {
  uuid: UUID!
  firstname: String!
  lastname: String!
  secondname: String!
  username: String!
  description: String!
  position: String!
  imageFile: DownloadFile!
  region: RegionTranslateList!
  program: Program!
  createdAt: NaiveDateTime!
  updatedAt: NaiveDateTime!
  certificates: [UserCertificateAndFile!]!
  subscribers: Int!
  isFollowed: Boolean!
}

type ShowUserShort {
  uuid: UUID!
  firstname: String!
  lastname: String!
  username: String!
  imageFile: DownloadFile!
}

type SlimCompany {
  uuid: UUID!
  shortname: String!
  isSupplier: Boolean!
}

type SlimUser {
  uuid: UUID!
  username: String!
  programId: Int!
}

type SpecPath {
  specId: Int!
  langId: Int!
  path: String!
}

type SpecTranslateList {
  specId: Int!
  langId: Int!
  spec: String!
}

type StandardAndRelatedData {
  uuid: UUID!
  parentStandardUuid: UUID!
  classifier: String!
  name: String!
  description: String!
  specifiedTolerance: String!
  technicalCommittee: String!
  publicationAt: NaiveDateTime!
  imageFile: DownloadFile!
  ownerUser: ShowUserShort!
  ownerCompany: ShowCompanyShort!
  typeAccess: TypeAccessTranslateList!
  standardStatus: StandardStatusTranslateList!
  region: RegionTranslateList!
  createdAt: NaiveDateTime!
  updatedAt: NaiveDateTime!
  standardFiles: [ShowFileRelatedData!]!
  standardSpecs: [SpecTranslateList!]!
  standardKeywords: [Keyword!]!
  subscribers: Int!
  isFollowed: Boolean!
}

type StandardStatusTranslateList {
  standardStatusId: Int!
  langId: Int!
  name: String!
}

type Token {
  bearer: String
}

type TypeAccessTranslateList {
  typeAccessId: Int!
  langId: Int!
  name: String!
}

# A UUID is a unique 128-bit number, stored as 16 octets. UUIDs are parsed as
# Strings within GraphQL. UUIDs are used to assign unique identifiers to
# entities without requiring a central allocating authority.
#
# # References
#
# * [Wikipedia: Universally Unique Identifier](http://en.wikipedia.org/wiki/Universally_unique_identifier)
# * [RFC4122: A Universally Unique IDentifier (UUID) URN Namespace](http://tools.ietf.org/html/rfc4122)
scalar UUID

type UploadFile {
  fileUuid: UUID!
  filename: String!
  uploadUrl: String!
}

type UserAccessComponentAndRelatedData {
  componentUuid: UUID!
  userUuid: UUID!
  typeAccess: TypeAccessTranslateList!
  isEnabled: Boolean!
  createdAt: NaiveDateTime!
  updatedAt: NaiveDateTime!
}

type UserAccessStandardAndRelatedData {
  standardUuid: UUID!
  userUuid: UUID!
  typeAccess: TypeAccessTranslateList!
  isEnabled: Boolean!
  createdAt: NaiveDateTime!
  updatedAt: NaiveDateTime!
}

type UserAndRelatedData {
  uuid: UUID!
  email: String!
  firstname: String!
  lastname: String!
  secondname: String!
  username: String!
  phone: String!
  description: String!
  address: String!
  position: String!
  timeZone: String!
  imageFile: DownloadFile!
  region: RegionTranslateList!
  program: Program!
  typeAccess: TypeAccessTranslateList!
  isEmailVerified: Boolean!
  createdAt: NaiveDateTime!
  updatedAt: NaiveDateTime!
  certificates: [UserCertificateAndFile!]!
  subscribers: Int!
  companiesCount: Int!
  componentsCount: Int!
  standardsCount: Int!
  favCompaniesCount: Int!
  favComponentsCount: Int!
  favStandardsCount: Int!
  favUsersCount: Int!
}

type UserCertificateAndFile {
  file: DownloadFile!
  userUuid: UUID!
  description: String!
}

type UserToken {
  userUuid: UUID!
  token: String!
  createdAt: NaiveDateTime!
  expirationAt: NaiveDateTime!
}
