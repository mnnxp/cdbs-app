schema {
  query: QueryRoot
  mutation: MutationRoot
}

# Directs the executor to query only when the field exists.
directive @ifdef on FIELD

type ActualStatusTranslateList {
  actualStatusId: Int!
  langId: Int!
  name: String!
}

type CertificateAndFile {
  file: ShowFileForDownload!
  userUuid: UUID!
  description: String!
}

input ChangeOwnerComponent {
  componentUuid: UUID!
  newOwnerUserUuid: UUID!
}

input ChangeOwnerStandard {
  standardUuid: UUID!
  newOwnerUserUuid: UUID!
}

input ChangeTypeAccessComponent {
  componentUuid: UUID!
  newTypeAccessUuid: Int!
}

input ChangeTypeAccessStandard {
  standardUuid: UUID!
  newTypeAccessUuid: Int!
}

type Claims {
  iss: String!
  username: String!
  sub: String!
  iat: String!
  exp: String!
}

type CompanyAccessComponentAndRelatedData {
  componentUuid: UUID!
  companyUuid: UUID!
  typeAccess: TypeAccessTranslateList!
  isEnabled: Boolean!
  createdAt: NaiveDateTime!
  updatedAt: NaiveDateTime!
}

type CompanyAccessStandardAndRelatedData {
  standardUuid: UUID!
  companyUuid: UUID!
  typeAccess: TypeAccessTranslateList!
  isEnabled: Boolean!
  createdAt: NaiveDateTime!
  updatedAt: NaiveDateTime!
}

type CompanyAndRelatedData {
  uuid: UUID!
  orgname: String!
  shortname: String!
  inn: String!
  phone: String!
  email: String!
  description: String!
  address: String!
  siteUrl: String!
  timeZone: String!
  ownerUser: ShowUserShort!
  imageFile: ShowFileForDownload!
  region: RegionTranslateList!
  companyRepresents: [CompanyRepresentAndRelatedData!]!
  companyType: CompanyTypeTranslateList!
  companyCertificates: [CertificateAndFile!]!
  companySpecs: [CompanySpecWithTranslation!]!
  isSupplier: Boolean!
  isEmailVerified: Boolean!
  subscribers: Int!
  isFollowed: Boolean!
  isEnabled: Boolean!
  isDelete: Boolean!
  createdAt: NaiveDateTime!
  updatedAt: NaiveDateTime!
}

type CompanyMemberAndRelatedData {
  companyUuid: UUID!
  userUuid: UUID!
  role: RoleMemberAndRelatedData!
  isEnabled: Boolean!
  createdAt: NaiveDateTime!
  updatedAt: NaiveDateTime!
}

type CompanyRepresentAndRelatedData {
  uuid: UUID!
  companyUuid: UUID!
  region: RegionTranslateList!
  representationType: RepresentationTypeTranslateList!
  name: String!
  address: String!
  phone: String!
}

type CompanySpecWithTranslation {
  spec: SpecTranslateList!
  companyUuid: UUID!
}

type CompanyTypeTranslateList {
  companyTypeId: Int!
  langId: Int!
  name: String!
  shortname: String!
}

type ComponentAndRelatedData {
  uuid: UUID!
  parentComponentUuid: UUID!
  name: String!
  description: String!
  ownerUser: ShowUserShort!
  typeAccessId: Int!
  componentType: ComponentTypeTranslateList!
  actualStatus: ActualStatusTranslateList!
  isBase: Boolean!
  subscribers: Int!
  isFollowed: Boolean!
  updatedAt: NaiveDateTime!
  licenses: [License!]!
  componentParams: [ComponentParamWithTranslation!]!
  files: [ShowFileForDownload!]!
  componentSpecs: [ComponentSpecWithTranslation!]!
  componentKeywords: [Keyword!]!
  componentModifications: [ComponentModificationAndRelatedData!]!
  componentSuppliers: [ComponentSupplierRelatedData!]!
  componentStandards: [ShowStandardShort!]!
}

type ComponentFav {
  componentUuid: ID!
  userUuid: ID!
  isEnabled: Boolean!
  createdAt: NaiveDateTime!
}

type ComponentModificationAndRelatedData {
  uuid: UUID!
  componentUuid: UUID!
  parentModificationUuid: UUID!
  modificationName: String!
  description: String!
  actualStatus: ActualStatusTranslateList!
  updatedAt: NaiveDateTime!
  filesetsForProgram: [FilesetProgramRelatedData!]!
  modificationParams: [ModificationParamWithTranslation!]!
}

type ComponentParamWithTranslation {
  componentUuid: UUID!
  param: ParamTranslateList!
  value: String!
}

type ComponentSpecWithTranslation {
  spec: SpecTranslateList!
  componentUuid: UUID!
}

type ComponentSupplierRelatedData {
  supplier: SlimCompany!
  componentUuid: UUID!
  description: String!
}

type ComponentTypeTranslateList {
  componentTypeId: Int!
  langId: Int!
  componentType: String!
}

input DelCompanyAccessComponentData {
  componentUuid: UUID!
  companyUuid: UUID!
}

input DelCompanyAccessStandardData {
  standardUuid: UUID!
  companyUuid: UUID!
}

input DelCompanyCertificateData {
  companyUuid: UUID!
  fileUuid: UUID!
}

input DelCompanyMemberData {
  companyUuid: UUID!
  userUuid: UUID!
}

input DelCompanyOfSuppliersData {
  companyUuid: UUID!
  componentUuid: UUID!
}

input DelComponentFileData {
  fileUuid: UUID!
  componentUuid: UUID!
}

input DelComponentModificationData {
  componentUuid: UUID!
  modificationUuid: UUID!
}

input DelComponentParamData {
  componentUuid: UUID!
  paramIds: [Int!]!
}

input DelFilesetProgramData {
  modificationUuid: UUID!
  filesetUuid: UUID!
}

input DelModificationFileData {
  fileUuid: UUID!
  modificationUuid: UUID!
}

input DelModificationFileFromFilesetData {
  filesetUuid: UUID!
  fileUuids: [UUID!]!
}

input DelModificationParamData {
  modificationUuid: UUID!
  paramIds: [Int!]!
}

input DelRoleAccessData {
  roleId: Int!
  typesAccessIds: [Int!]!
}

input DelRoleMemberData {
  companyUuid: UUID!
  roleId: Int!
}

input DelStandardToComponentData {
  standardsUuids: [UUID!]!
  componentUuid: UUID!
}

input DelSuppliersComponentData {
  componentUuid: UUID!
  companiesUuids: [UUID!]!
}

input DelUserAccessComponentData {
  componentUuid: UUID!
  userUuid: UUID!
}

input DelUserAccessStandardData {
  standardUuid: UUID!
  userUuid: UUID!
}

input DelUserCertificateData {
  fileUuid: UUID!
}

input DeleteStandardFileData {
  fileUuid: UUID!
  standardUuid: UUID!
}

type DownloadFile {
  uuid: UUID!
  filename: String!
  filesize: Int!
  downloadUrl: String!
}

type Extension {
  id: Int!
  extension: String!
  programId: Int!
}

type FileOfFileset {
  filesetUuid: UUID!
  file: ShowFileForDownload!
}

type FilesetProgram {
  uuid: ID!
  modificationUuid: ID!
  programId: Int!
}

type FilesetProgramRelatedData {
  uuid: UUID!
  modificationUuid: UUID!
  program: Program!
}

input IptCompanyAccessComponentData {
  componentUuid: UUID!
  companyUuid: UUID!
  typeAccessId: Int!
}

input IptCompanyAccessStandardData {
  standardUuid: UUID!
  companyUuid: UUID!
  typeAccessId: Int!
}

input IptCompanyCertificateData {
  companyUuid: UUID!
  description: String!
  filename: String!
}

input IptCompanyData {
  orgname: String!
  shortname: String!
  inn: String!
  phone: String!
  email: String!
  description: String!
  address: String!
  siteUrl: String!
  timeZone: String!
  regionId: Int!
  companyTypeId: Int!
}

input IptCompanyMemberData {
  companyUuid: UUID!
  userUuid: UUID!
  roleId: Int!
}

input IptCompanyRepresentData {
  companyUuid: UUID!
  regionId: Int!
  representationTypeId: Int!
  name: String!
  address: String!
  phone: String!
}

input IptCompanySpecData {
  companyUuid: UUID!
  specIds: [Int!]!
}

input IptComponentData {
  parentComponentUuid: UUID
  name: String!
  description: String!
  typeAccessId: Int!
  componentTypeId: Int!
  actualStatusId: Int!
  isBase: Boolean!
}

input IptComponentFileData {
  filename: [String!]!
  componentUuid: UUID!
}

input IptComponentKeywordData {
  componentUuid: UUID!
  keywordIds: [Int!]!
}

input IptComponentLicenseData {
  componentUuid: UUID!
  licenseId: Int!
}

input IptComponentModificationData {
  componentUuid: UUID!
  parentModificationUuid: UUID!
  modificationName: String!
  description: String!
  actualStatusId: Int!
}

input IptComponentParamData {
  componentUuid: UUID!
  params: [IptParamData!]!
}

input IptComponentSpecData {
  componentUuid: UUID!
  specIds: [Int!]!
}

input IptExtensionData {
  extension: String!
  programId: Int!
}

input IptFilesetProgramData {
  modificationUuid: UUID!
  programId: Int!
}

input IptKeywordData {
  keyword: String!
}

input IptModificationFileData {
  filename: [String!]!
  modificationUuid: UUID!
}

input IptModificationFileFromFilesetData {
  filesetUuid: UUID!
  filename: [String!]!
}

input IptModificationParamData {
  modificationUuid: UUID!
  params: [IptParamData!]!
}

input IptParamData {
  paramId: Int!
  value: String!
}

input IptParamTranslateListData {
  langId: Int!
  paramname: String!
}

input IptProgramData {
  name: String!
}

input IptRegionTranslateListData {
  langId: Int!
  region: String!
}

input IptRoleAccessData {
  roleId: Int!
  typesAccessIds: [Int!]!
}

input IptRoleMemberData {
  companyUuid: UUID!
  langId: Int!
  name: String!
}

input IptStandardData {
  parentStandardUuid: UUID
  classifier: String!
  name: String!
  description: String!
  specifiedTolerance: String!
  technicalCommittee: String!
  publicationAt: NaiveDateTime!
  companyUuid: UUID!
  typeAccessId: Int!
  standardStatusId: Int!
  regionId: Int!
}

input IptStandardFilesData {
  filename: [String!]!
  standardUuid: UUID!
}

input IptStandardKeywordsData {
  standardUuid: UUID!
  keywordIds: [Int!]!
}

input IptStandardSpecsData {
  standardUuid: UUID!
  specIds: [Int!]!
}

input IptStandardToComponentData {
  standardUuid: UUID!
  componentUuid: UUID!
}

input IptSupplierComponentData {
  componentUuid: UUID!
  companyUuid: UUID!
  description: String!
}

input IptUpdataNameRoleData {
  companyUuid: UUID!
  roleId: Int!
  langId: Int!
  name: String!
}

input IptUpdateCompanyCertificateData {
  companyUuid: UUID!
  fileUuid: UUID!
  description: String!
}

input IptUpdateCompanyData {
  orgname: String
  shortname: String
  inn: String
  phone: String
  email: String
  description: String
  address: String
  siteUrl: String
  timeZone: String
  regionId: Int
  companyTypeId: Int
}

input IptUpdateCompanyRepresentData {
  regionId: Int
  representationTypeId: Int
  name: String
  address: String
  phone: String
}

input IptUpdateComponentData {
  parentComponentUuid: UUID
  name: String
  description: String
  componentTypeId: Int
  actualStatusId: Int
}

input IptUpdateComponentModificationData {
  modificationName: String
  description: String
  actualStatusId: Int
}

input IptUpdatePassword {
  oldPassword: String!
  newPassword: String!
}

input IptUpdateStandardData {
  classifier: String
  name: String
  description: String
  specifiedTolerance: String
  technicalCommittee: String
  publicationAt: NaiveDateTime
  companyUuid: UUID
  standardStatusId: Int
  regionId: Int
}

input IptUpdateUserCertificateData {
  fileUuid: UUID!
  description: String!
}

input IptUpdateUserData {
  email: String
  firstname: String
  lastname: String
  secondname: String
  username: String
  phone: String
  description: String
  address: String
  position: String
  timeZone: String
  regionId: Int
  programId: Int
}

input IptUserAccessComponentData {
  componentUuid: UUID!
  userUuid: UUID!
  typeAccessId: Int!
}

input IptUserAccessStandardData {
  standardUuid: UUID!
  userUuid: UUID!
  typeAccessId: Int!
}

input IptUserCertificateData {
  description: String!
  filename: String!
}

input IptUserData {
  email: String!
  username: String!
  password: String!
  firstname: String
  lastname: String
  secondname: String
  phone: String
  description: String
  address: String
  position: String
  timeZone: String
  regionId: Int
  programId: Int
  typeAccessId: Int
}

type Keyword {
  id: Int!
  keyword: String!
}

type Language {
  id: Int!
  lang: String!
  langshort: String!
}

type License {
  id: Int!
  name: String!
  keyword: String!
  publicationAt: NaiveDateTime!
}

input LicenseData {
  name: String!
  keyword: String!
  publicationAt: NaiveDateTime!
}

type ModificationParamWithTranslation {
  modificationUuid: UUID!
  param: ParamTranslateList!
  value: String!
}

type MutationRoot {
  registerUser(data: IptUserData!): SlimUser!
  deleteUserData(password: String!): Boolean!
  putUpdatePassword(data: IptUpdatePassword!): Boolean!
  changeTypeAccessUser(newTypeAccess: Int!): Boolean!
  putUserUpdate(data: IptUpdateUserData!): Int!
  uploadFavicon(filename: String!): UploadFile!
  uploadUserCertificate(certData: IptUserCertificateData!): UploadFile!

  # Update user certificate description
  updateUserCertificate(data: IptUpdateUserCertificateData!): Boolean!
  deleteUserCertificate(data: DelUserCertificateData!): Boolean!
  addCompanyFav(companyUuid: UUID!): Boolean!
  deleteCompanyFav(companyUuid: UUID!): Boolean!
  addComponentFav(componentUuid: UUID!): Boolean!
  deleteComponentFav(componentUuid: UUID!): Boolean!
  addStandardFav(standardUuid: UUID!): Boolean!
  deleteStandardFav(standardUuid: UUID!): Boolean!
  addUserFav(userUuid: UUID!): Boolean!
  deleteUserFav(userUuid: UUID!): Boolean!
  readNotification(notificationId: Int!): Boolean!
  deleteNotification(notificationIds: [Int!]!): Int!
  registerComponent(data: IptComponentData!): SlimComponent!

  # Transfer component ownership to another user
  transferComponentOwnership(data: ChangeOwnerComponent!): Boolean!

  # Change component type access
  changeComponentAccess(data: ChangeTypeAccessComponent!): Boolean!
  putComponentUpdate(componentUuid: UUID!, data: IptUpdateComponentData!): Int!
  deleteComponent(componentUuid: UUID!): SlimComponent!
  setCompanyAccessComponent(data: IptCompanyAccessComponentData!): Boolean!
  deleteCompanyAccessComponent(data: DelCompanyAccessComponentData!): Boolean!
  setUserAccessComponent(data: IptUserAccessComponentData!): Boolean!
  deleteUserAccessComponent(data: DelUserAccessComponentData!): Boolean!
  putComponentParams(data: IptComponentParamData!): Int!
  deleteComponentParams(data: DelComponentParamData!): Int!
  addComponentLicense(data: IptComponentLicenseData!): Boolean!
  deleteComponentLicense(data: IptComponentLicenseData!): Int!
  addComponentSpecs(data: IptComponentSpecData!): Int!
  deleteComponentSpecs(data: IptComponentSpecData!): Int!
  addComponentKeywords(data: IptComponentKeywordData!): Int!
  deleteComponentKeywords(data: IptComponentKeywordData!): Int!
  uploadComponentFiles(data: IptComponentFileData!): [UploadFile!]!
  deleteComponentFile(data: DelComponentFileData!): Boolean!
  deleteSuppliersComponent(data: DelSuppliersComponentData!): Int!
  addStandardToComponent(data: IptStandardToComponentData!): Boolean!
  deleteStandardsComponent(data: DelStandardToComponentData!): Int!
  registerComponentModification(
    data: IptComponentModificationData!
  ): SlimComponentModification!
  putComponentModificationUpdate(
    componentModificationUuid: UUID!
    data: IptUpdateComponentModificationData!
  ): Int!
  deleteComponentModification(
    data: DelComponentModificationData!
  ): SlimComponentModification!
  putModificationParams(data: IptModificationParamData!): Int!
  deleteModificationParams(data: DelModificationParamData!): Int!
  uploadModificationFiles(data: IptModificationFileData!): [UploadFile!]!
  deleteModificationFile(data: DelModificationFileData!): Boolean!
  registerModificationFileset(data: IptFilesetProgramData!): FilesetProgram!
  deleteModificationFileset(data: DelFilesetProgramData!): Boolean!
  uploadFilesToFileset(
    data: IptModificationFileFromFilesetData!
  ): [UploadFile!]!
  deleteFilesFromFileset(data: DelModificationFileFromFilesetData!): Boolean!
  addComponentFavorite(componentUuid: UUID!): ComponentFav!
  registerStandard(data: IptStandardData!): SlimStandard!

  # Transfer component ownership to another user
  transferStandardOwnership(data: ChangeOwnerStandard!): Boolean!

  # Change standard type access
  changeStandardAccess(data: ChangeTypeAccessStandard!): Boolean!
  putStandardUpdate(standardUuid: UUID!, data: IptUpdateStandardData!): Int!
  deleteStandard(standardUuid: UUID!): SlimStandard!
  setCompanyAccessStandard(data: IptCompanyAccessStandardData!): Boolean!
  deleteCompanyAccessStandard(data: DelCompanyAccessStandardData!): Boolean!
  setUserAccessStandard(data: IptUserAccessStandardData!): Boolean!
  deleteUserAccessStandard(data: DelUserAccessStandardData!): Boolean!
  addStandardSpecs(data: IptStandardSpecsData!): Int!
  deleteStandardSpecs(data: IptStandardSpecsData!): Int!
  addStandardKeywords(data: IptStandardKeywordsData!): Int!
  deleteStandardKeywords(data: IptStandardKeywordsData!): Int!
  uploadStandardFiles(data: IptStandardFilesData!): [UploadFile!]!
  standardFiles(standardUuid: UUID!): [DownloadFile!]!
  deleteStandardFiles(data: DeleteStandardFileData!): Boolean!
  registerCompany(data: IptCompanyData!): SlimCompany!
  putCompanyUpdate(companyUuid: UUID!, data: IptUpdateCompanyData!): Int!
  deleteCompany(companyUuid: UUID!): SlimCompany!
  uploadCompanyCertificate(certData: IptCompanyCertificateData!): UploadFile!

  # Update company certificate description
  updateCompanyCertificate(data: IptUpdateCompanyCertificateData!): Boolean!
  deleteCompanyCertificate(data: DelCompanyCertificateData!): Boolean!
  addCompanySpecs(data: IptCompanySpecData!): Int!
  deleteCompanySpecs(data: IptCompanySpecData!): Int!
  registerCompanyRepresent(
    data: IptCompanyRepresentData!
  ): SlimCompanyRepresent!
  updateCompanyRepresent(
    companyUuid: UUID!
    companyRepresentUuid: UUID!
    data: IptUpdateCompanyRepresentData!
  ): Int!
  deleteCompanyRepresent(
    companyUuid: UUID!
    companyRepresentUuid: UUID!
  ): SlimCompanyRepresent!
  addCompanyMember(data: IptCompanyMemberData!): SlimCompanyMember!

  # Change access role for member
  changeRoleMember(data: IptCompanyMemberData!): Boolean!
  deleteCompanyMember(data: DelCompanyMemberData!): SlimCompanyMember!
  registerCompanyRole(data: IptRoleMemberData!): Int!
  changeNameRoleCompany(data: IptUpdataNameRoleData!): Boolean!
  deleteCompanyRole(data: DelRoleMemberData!): Int!
  addAccessRole(data: IptRoleAccessData!): Boolean!
  deleteAccessRole(data: DelRoleAccessData!): Int!

  # Add company to suppliers list component
  addComponentSupplier(data: IptSupplierComponentData!): Boolean!

  # Set company as main supplier component
  setCompanyOwnerSupplier(data: IptSupplierComponentData!): Boolean!

  # Delete company of suppliers list
  deleteSupplierCompany(data: DelCompanyOfSuppliersData!): Boolean!
  registerExtension(data: IptExtensionData!): Extension!
  registerKeyword(data: IptKeywordData!): Keyword!
  registerLicense(data: LicenseData!): License!
  registerParam(data: IptParamTranslateListData!): ParamTranslateList!
  registerProgram(data: IptProgramData!): Program!
  registerRegion(data: IptRegionTranslateListData!): RegionTranslateList!

  # Сonfirmation of successful upload of files to storage
  uploadCompleted(fileUuids: [UUID!]!): Int!

  # Delete file in storage
  deleteFile(fileUuid: UUID!): Boolean!
}

scalar NaiveDateTime

type Notification {
  id: Int!
  notification: String!
  degreeImportanceId: Int!
  createdAt: NaiveDateTime!
  isRead: Boolean!
}

type ParamTranslateList {
  paramId: Int!
  langId: Int!
  paramname: String!
}

type Program {
  id: Int!
  name: String!
}

type QueryRoot {
  users(usersUuids: [UUID!]!): [ShowUserShort!]!
  user(userUuid: UUID, username: String): ShowUserAndRelatedData!
  myself: SlimUser!
  selfData: UserAndRelatedData!
  showTokens: [UserToken!]!
  getToken: Token!
  updateToken: Token!
  decodeToken: Claims!
  deleteToken(token: String!): Boolean!
  deleteAllTokens: Int!
  logout: String!
  notifications(selectIds: [Int!], limit: Int, offset: Int): [Notification!]!
  components(
    componentsUuids: [UUID!]
    favorite: Boolean
    userUuid: UUID
    companyUuid: UUID
  ): [ShowComponentShort!]!
  component(componentUuid: UUID!): ComponentAndRelatedData!
  getCompaniesListAccessComponent(
    componentUuid: UUID!
  ): [CompanyAccessComponentAndRelatedData!]!
  getUsersListAccessComponent(
    componentUuid: UUID!
  ): [UserAccessComponentAndRelatedData!]!
  componentFiles(componentUuid: UUID!): [DownloadFile!]!
  componentModificationFiles(modificationUuid: UUID!): [DownloadFile!]!
  componentModificationFilesets(
    modificationUuid: UUID!
    programId: [Int!]
    limit: Int
    offset: Int
  ): [FilesetProgramRelatedData!]!
  componentModificationFilesOfFileset(
    filesetUuid: UUID!
    fileUuids: [UUID!]
    limit: Int
    offset: Int
  ): [FileOfFileset!]!
  standards(standardsUuids: [UUID!]!): [ShowStandardShort!]!
  standard(standardUuid: UUID!): StandardAndRelatedData!
  getCompaniesListAccessStandard(
    standardUuid: UUID!
  ): [CompanyAccessStandardAndRelatedData!]!
  getUsersListAccessStandard(
    standardUuid: UUID!
  ): [UserAccessStandardAndRelatedData!]!
  companies(companiesUuids: [UUID!]!): [ShowCompanyShort!]!
  company(companyUuid: UUID!): CompanyAndRelatedData!
  companyRepresents(
    companyUuid: UUID
    representsUuids: [UUID!]
  ): [CompanyRepresentAndRelatedData!]!
  companyMembers(companyUuid: UUID!): [CompanyMemberAndRelatedData!]!
  companyRoles(companyUuid: UUID!): [RoleMemberAndRelatedData!]!
  keywords(keywordId: [Int!], limit: Int, offset: Int): [Keyword!]!
  languages(langId: [Int!], limit: Int, offset: Int): [Language!]!
  licenses(licenseId: [Int!], limit: Int, offset: Int): [License!]!
  params(paramId: [Int!], limit: Int, offset: Int): [ParamTranslateList!]!
  programs(programId: [Int!], limit: Int, offset: Int): [Program!]!
  regions(regionId: [Int!], limit: Int, offset: Int): [RegionTranslateList!]!
  specs(specId: [Int!], limit: Int, offset: Int): [SpecTranslateList!]!

  # Presigned URL for download file from storage
  presignedUrl(fileUuid: UUID!): DownloadFile!
  typesAccess(
    typeAccessIds: [Int!]
    limit: Int
    offset: Int
  ): [TypeAccessTranslateList!]!
  _service: _Service!
  _entities(representations: [_Any!]!): [_Entity]!
}

type RegionTranslateList {
  regionId: Int!
  langId: Int!
  region: String!
}

type RepresentationTypeTranslateList {
  representationTypeId: Int!
  langId: Int!
  representationType: String!
}

type RoleMemberAndRelatedData {
  role: RoleMemberTranslateList!
  access: [TypeAccessTranslateList!]!
}

type RoleMemberTranslateList {
  roleMemberId: Int!
  langId: Int!
  name: String!
}

type ShowCompanyShort {
  uuid: UUID!
  shortname: String!
  inn: String!
  description: String!
  imageFile: ShowFileForDownload!
  region: RegionTranslateList!
  companyType: CompanyTypeTranslateList!
  isSupplier: Boolean!
  isFollowed: Boolean!
  updatedAt: NaiveDateTime!
}

type ShowComponentShort {
  uuid: UUID!
  name: String!
  description: String!
  ownerUser: ShowUserShort!
  typeAccessId: Int!
  componentType: ComponentTypeTranslateList!
  actualStatus: ActualStatusTranslateList!
  isFollowed: Boolean!
  isBase: Boolean!
  updatedAt: NaiveDateTime!
  licenses: [License!]!
  files: [ShowFileForDownload!]!
  componentSuppliers: [ComponentSupplierRelatedData!]!
}

type ShowFileForDownload {
  uuid: UUID!
  parentFileUuid: UUID!
  download: DownloadFile!
  ownerUser: ShowUserShort!
  contentType: String!
  program: Program!
  createdAt: NaiveDateTime!
  updatedAt: NaiveDateTime!
}

type ShowStandardShort {
  uuid: UUID!
  classifier: String!
  name: String!
  description: String!
  specifiedTolerance: String!
  publicationAt: NaiveDateTime!
  ownerCompany: ShowCompanyShort!
  standardStatus: StandardStatusTranslateList!
  updatedAt: NaiveDateTime!
  isFollowed: Boolean!
}

# For show data about profile
type ShowUserAndRelatedData {
  uuid: UUID!
  firstname: String!
  lastname: String!
  secondname: String!
  username: String!
  description: String!
  position: String!
  imageFile: DownloadFile!
  region: RegionTranslateList!
  program: Program!
  createdAt: NaiveDateTime!
  updatedAt: NaiveDateTime!
  certificates: [CertificateAndFile!]!
  subscribers: Int!
  isFollowed: Boolean!
}

type ShowUserShort {
  uuid: UUID!
  username: String!
  imageFile: DownloadFile!
}

type SlimCompany {
  uuid: ID!
  shortname: String!
  isSupplier: Boolean!
}

type SlimCompanyMember {
  companyUuid: UUID!
  userUuid: UUID!
  roleId: Int!
}

type SlimCompanyRepresent {
  uuid: ID!
  companyUuid: ID!
  name: String!
  address: String!
  phone: String!
}

type SlimComponent {
  uuid: ID!
  name: String!
  description: String!
  typeAccessId: Int!
  componentTypeId: Int!
  actualStatusId: Int!
  isBase: Boolean!
  updatedAt: NaiveDateTime!
}

type SlimComponentModification {
  uuid: ID!
  componentUuid: ID!
  modificationName: String!
  description: String!
  updatedAt: NaiveDateTime!
}

type SlimStandard {
  uuid: ID!
  classifier: String!
  name: String!
  specifiedTolerance: String!
  technicalCommittee: String!
  publicationAt: NaiveDateTime!
  standardStatusId: Int!
}

type SlimUser {
  uuid: ID!
  username: String!
  programId: Int!
}

type SpecTranslateList {
  specId: Int!
  langId: Int!
  spec: String!
}

type StandardAndRelatedData {
  uuid: UUID!
  parentStandardUuid: UUID!
  classifier: String!
  name: String!
  description: String!
  specifiedTolerance: String!
  technicalCommittee: String!
  publicationAt: NaiveDateTime!
  imageFile: ShowFileForDownload!
  ownerUser: ShowUserShort!
  ownerCompany: ShowCompanyShort!
  typeAccessId: Int!
  standardStatus: StandardStatusTranslateList!
  region: RegionTranslateList!
  isDelete: Boolean!
  createdAt: NaiveDateTime!
  updatedAt: NaiveDateTime!
  standardFiles: [ShowFileForDownload!]!
  standardSpecs: [StandardSpecWithTranslation!]!
  standardKeywords: [Keyword!]!
  subscribers: Int!
  isFollowed: Boolean!
}

type StandardSpecWithTranslation {
  spec: SpecTranslateList!
  standardUuid: UUID!
}

type StandardStatusTranslateList {
  standardStatusId: Int!
  langId: Int!
  name: String!
}

type Token {
  bearer: String
}

type TypeAccessTranslateList {
  typeAccessId: Int!
  langId: Int!
  name: String!
}

scalar UUID

type UploadFile {
  fileUuid: ID!
  filename: String!
  uploadUrl: String!
}

type UserAccessComponentAndRelatedData {
  componentUuid: UUID!
  userUuid: UUID!
  typeAccess: TypeAccessTranslateList!
  isEnabled: Boolean!
  createdAt: NaiveDateTime!
  updatedAt: NaiveDateTime!
}

type UserAccessStandardAndRelatedData {
  standardUuid: UUID!
  userUuid: UUID!
  typeAccess: TypeAccessTranslateList!
  isEnabled: Boolean!
  createdAt: NaiveDateTime!
  updatedAt: NaiveDateTime!
}

type UserAndRelatedData {
  uuid: UUID!
  email: String!
  firstname: String!
  lastname: String!
  secondname: String!
  username: String!
  phone: String!
  description: String!
  address: String!
  position: String!
  timeZone: String!
  imageFile: DownloadFile!
  region: RegionTranslateList!
  program: Program!
  typeAccess: TypeAccessTranslateList!
  isEmailVerified: Boolean!
  isEnabled: Boolean!
  isDelete: Boolean!
  createdAt: NaiveDateTime!
  updatedAt: NaiveDateTime!
  certificates: [CertificateAndFile!]!
  subscribers: Int!
  companiesCount: Int!
  componentsCount: Int!
  standardsCount: Int!
  favCompaniesCount: Int!
  favComponentsCount: Int!
  favStandardsCount: Int!
  favUsersCount: Int!
}

type UserToken {
  userUuid: ID!
  token: String!
  createdAt: NaiveDateTime!
  expirationAt: NaiveDateTime!
}

# The `_Any` scalar is used to pass representations of entities from external services into the root `_entities` field for execution.
scalar _Any

union _Entity

type _Service {
  sdl: String
}
